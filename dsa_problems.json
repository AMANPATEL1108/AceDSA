{
  "dsa_problems": [
    {
      "topic": "Arrays",
      "problems": [
        {
          "id": 1,
          "title": "Two Sum",
          "topic": "Arrays",
          "difficulty": "Easy",
          "leetcode_link": "https://leetcode.com/problems/two-sum/",
          "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
          "template": "var twoSum = function(nums, target) {\n    // Your code here\n};",
          "example": [
            {
            "input": "nums = [2,7,11,15], target = 9",
            "output": "[0,1]"
            },
            {
            "input": "nums = [3,2,4], target = 6",
            "output": "[1,2]"
            },
            {
            "input": "nums = [3,3], target = 6",
            "output": "[0,1]"
            }
          ],
          "constraints": [
            "2 <= nums.length <= 10^4",
            "-10^9 <= nums[i] <= 10^9",
            "-10^9 <= target <= 10^9",
            "Only one valid answer exists."
          ],
          "follow_up": "Can you come up with an algorithm that is less than O(n^2) time complexity?",
          "hints": [
            "A really brute force way would be to search for all possible pairs of numbers but that would be too slow.",
            "Try to use the fact that the complement of a number can be found in constant time using a hash table."
          ],
          "solution_approach": "Use a hash table to store the complement of each number. As you iterate through the array, check if the current number's complement exists in the hash table. If it does, you've found the pair.",
          "time_complexity": "O(n)",
          "space_complexity": "O(n)",
          "code_snippet": {
            "javascript": "function twoSum(nums, target) {\n  const numToIndex = {};\n  for (let i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    if (complement in numToIndex) {\n      return [numToIndex[complement], i];\n    }\n    numToIndex[nums[i]] = i;\n  }\n  return [];\n}"
          },
          "related_topics": ["Hash Table", "Array"],
          "testCases": [
            {
              "input": [[2,7,11,15], 9],
              "output": [0,1]
            },
            {
              "input": [[3,2,4], 6],
              "output": [1,2]
            },
            {
              "input": [[3,3], 6],
              "output": [0,1]
            },
            {
              "input": [[1,5,3,4,2], 6],
              "output": [0,1]
            },
            {
              "input": [[-1,-2,-3,-4,-5], -8],
              "output": [2,4]
            },
            {
              "input": [[0,4,3,0], 0],
              "output": [0,3]
            },
            {
              "input": [[2,5,5,11], 10],
              "output": [1,2]
            },
            {
              "input": [[-3,4,3,90], 0],
              "output": [0,2]
            },
            {
              "input": [[1000,1001,1002,1003], 2003],
              "output": [0,3]
            },
            {
              "input": [[0,0,0,0], 0],
              "output": [0,1]
            }
          ]
        },
        {
          "id": 2,
          "title": "Best Time to Buy and Sell Stock",
          "topic": "Arrays",
          "difficulty": "Easy",
          "leetcode_link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
          "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
          "template": "var maxProfit = function(prices) {\n    // Your code here\n};",
          "example": [
            {
            "input": "prices = [7,1,5,3,6,4]",
            "output": "5"
            },
            {
            "input": "prices = [7,6,4,3,1]",
            "output": "0"
            },
            {
            "input": "prices = [1,2]",
            "output": "1"
            }
          ],
          "constraints": [
            "1 <= prices.length <= 10^5",
            "0 <= prices[i] <= 10^4"
          ],
          "follow_up": "Can you solve it in O(1) space complexity?",
          "hints": [
            "Keep track of the minimum price seen so far.",
            "At each step, calculate the potential profit if you sell on that day."
          ],
          "solution_approach": "Use a single pass through the array. Keep track of the minimum price seen so far and the maximum profit that can be achieved. Update these values as you iterate through the array.",
          "time_complexity": "O(n)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function maxProfit(prices) {\n  let minPrice = Infinity;\n  let maxProfit = 0;\n  for (let i = 0; i < prices.length; i++) {\n    minPrice = Math.min(minPrice, prices[i]);\n    maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n  }\n  return maxProfit;\n}"
          },
          "related_topics": ["Array", "Dynamic Programming"],
          "testCases": [
            {
              "input": [[7,1,5,3,6,4]],
              "output": 5
            },
            {
              "input": [[7,6,4,3,1]],
              "output": 0
            },
            {
              "input": [[1,2]],
              "output": 1
            },
            {
              "input": [[3,3,5,0,0,3,1,4]],
              "output": 4
            },
            {
              "input": [[1,4,2]],
              "output": 3
            },
            {
              "input": [[2,4,1]],
              "output": 2
            },
            {
              "input": [[2,1,2,1,0,1,2]],
              "output": 2
            },
            {
              "input": [[9,8,7,6,5,4,3,2,1]],
              "output": 0
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9]],
              "output": 8
            },
            {
              "input": [[100,180,260,310,40,535,695]],
              "output": 655
            }
          ]
        },
        {
          "id": 3,
          "title": "Contains Duplicate",
          "topic": "Arrays",
          "difficulty": "Easy",
          "leetcode_link": "https://leetcode.com/problems/contains-duplicate/",
          "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
          "template": "var containsDuplicate = function(nums) {\n    // Your code here\n};",
          "example": [
            {
            "input": "nums = [1,2,3,1]",
            "output": "true"
            },
            {
            "input": "nums = [1,2,3,4]",
            "output": "false"
            },
            {
            "input": "nums = [1,1,1,3,3,4,3,2,4,2]",
            "output": "true"
            }
          ],
          "constraints": [
            "1 <= nums.length <= 10^5",
            "-10^9 <= nums[i] <= 10^9"
          ],
          "follow_up": "Can you solve it with O(1) extra space?",
          "hints": [
            "Use a hash table to store the frequency of each number.",
            "Iterate through the array and check if the number has been seen before."
          ],
          "solution_approach": "Use a hash table to store the frequency of each number. Iterate through the array and check if the number has been seen before.",
          "time_complexity": "O(n)",
          "space_complexity": "O(n)",
          "code_snippet": {
            "javascript": "function containsDuplicate(nums) {\n  const numToFreq = {};\n  for (let num of nums) {\n    if (numToFreq[num]) {\n      return true;\n    }\n    numToFreq[num] = 1;\n  }\n  return false;\n}"
          },
          "related_topics": ["Hash Table", "Array"],
          "testCases": [
            {
              "input": [[1,2,3,1]],
              "output": true
            },
            {
              "input": [[1,2,3,4]],
              "output": false
            },
            {
              "input": [[1,1,1,3,3,4,3,2,4,2]],
              "output": true
            },
            {
              "input": [[-1,-2,-3,-4,-5]],
              "output": false
            },
            {
              "input": [[0,0,0,0]],
              "output": true
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9]],
              "output": false
            },
            {
              "input": [[1,1,1,1,1,1,1,1,1]],
              "output": true
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,1]],
              "output": true
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,0]],
              "output": false
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,0,1]],
              "output": true
            }
          ]
        },
        {
          "id": 4,
          "title": "Product of Array Except Self",
          "topic": "Arrays",
          "difficulty": "Medium",
          "leetcode_link": "https://leetcode.com/problems/product-of-array-except-self/",
          "description": "Given an integer array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. You must write an algorithm that runs in O(n) time and without using the division operation.",
          "template": "var productExceptSelf = function(nums) {\n    // Your code here\n};",
          "example": [
            {
              "input": "nums = [1,2,3,4]",
              "output": "[24,12,8,6]"
            },
            {
              "input": "nums = [-1,1,0,-3,3]",
              "output": "[0,0,9,0,0]"
            },
            {
              "input": "nums = [1,2,3,4,5]",
              "output": "[120,60,40,30,24]"
            }
          ],
          "constraints": [
            "2 <= nums.length <= 10^5",
            "-10^5 <= nums[i] <= 10^5"
          ],
          "follow_up": "Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)",
          "hints": [
            "Use two arrays to store the products of the elements to the left and right of each element.",
            "Multiply the left and right products to get the final result."
          ],
          "solution_approach": "Use two arrays to store the products of the elements to the left and right of each element. Multiply the left and right products to get the final result.",
          "time_complexity": "O(n)",
          "space_complexity": "O(n)",
          "code_snippet": {
            "javascript": "function productExceptSelf(nums) {\n  const n = nums.length;\n  const leftProducts = new Array(n).fill(1);\n  const rightProducts = new Array(n).fill(1);\n  for (let i = 1; i < n; i++) {\n    leftProducts[i] = leftProducts[i - 1] * nums[i - 1];\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    rightProducts[i] = rightProducts[i + 1] * nums[i + 1];\n  }\n  const output = new Array(n);\n  for (let i = 0; i < n; i++) {\n    output[i] = leftProducts[i] * rightProducts[i];\n  }\n  return output;\n}"
          },
          "related_topics": ["Array"],
          "testCases": [
            {
              "input": [[1,2,3,4]],
              "output": [24,12,8,6]
            },
            {
              "input": [[-1,1,0,-3,3]],
              "output": [0,0,9,0,0]
            },
            {
              "input": [[1,2,3,4,5]],
              "output": [120,60,40,30,24]
            },
            {
              "input": [[2,3,4,5,6]],
              "output": [360,240,180,144,120]
            },
            {
              "input": [[1,1,1,1,1]],
              "output": [1,1,1,1,1]
            },
            {
              "input": [[-2,-3,-4,-5]],
              "output": [-60,-40,-30,-24]
            },
            {
              "input": [[10,3,5,6,2]],
              "output": [180,600,360,300,900]
            },
            {
              "input": [[0,0,0,0]],
              "output": [0,0,0,0]
            },
            {
              "input": [[1,2,0,4,5]],
              "output": [0,0,40,0,0]
            },
            {
              "input": [[7,8,9,10]],
              "output": [720,630,560,504]
            }
          ]
        },
        {
          "id": 5,
          "title": "Maximum Subarray",
          "topic": "Arrays",
          "difficulty": "Easy",
          "leetcode_link": "https://leetcode.com/problems/maximum-subarray/",
          "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
          "template": "var maxSubArray = function(nums) {\n    // Your code here\n};",
          "example": [
            {
              "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
              "output": "6"
            },
            {
              "input": "nums = [1]",
              "output": "1"
            },
            {
              "input": "nums = [5,4,-1,7,8]",
              "output": "23"
            }
          ],
          "constraints": [
            "1 <= nums.length <= 10^5",
            "-10^4 <= nums[i] <= 10^4"
          ],
          "follow_up": "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",
          "hints": [
            "Keep track of the maximum sum subarray ending at each index.",
            "At each step, calculate the maximum sum subarray ending at that index."
          ],
          "solution_approach": "Use Kadane's algorithm to find the maximum sum subarray ending at each index. Keep track of the maximum sum subarray seen so far.",
          "time_complexity": "O(n)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function maxSubArray(nums) {\n  let maxSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.max(nums[i], currentSum + nums[i]);\n    maxSum = Math.max(maxSum, currentSum);\n  }\n  return maxSum;\n}"
          },
          "related_topics": ["Array", "Dynamic Programming"],
          "testCases": [
            {
              "input": [[-2,1,-3,4,-1,2,1,-5,4]],
              "output": 6
            },
            {
              "input": [[1]],
              "output": 1
            },
            {
              "input": [[5,4,-1,7,8]],
              "output": 23
            },
            {
              "input": [[-1,-2,-3,-4,-5]],
              "output": -1
            },
            {
              "input": [[1,2,3,4,5]],
              "output": 15
            },
            {
              "input": [[-2,-1]],
              "output": -1
            },
            {
              "input": [[0,0,0,0]],
              "output": 0
            },
            {
              "input": [[1,-1,1,-1,1,-1]],
              "output": 1
            },
            {
              "input": [[-1,0,-2,2]],
              "output": 2
            },
            {
              "input": [[3,-2,5,-1]],
              "output": 6
            }
          ]
        },
        {
          "id": 6,
          "title": "Maximum Product Subarray",
          "topic": "Arrays",
          "difficulty": "Medium",
          "leetcode_link": "https://leetcode.com/problems/maximum-product-subarray/",
          "description": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.",
          "template": "var maxProduct = function(nums) {\n    // Your code here\n};",
          "example": [
            {
              "input": "nums = [2,3,-2,4]",
              "output": "6"
            },
            {
              "input": "nums = [-2,0,-1]",
              "output": "0"
            },
            {
              "input": "nums = [-2,3,-4]",
              "output": "24"
            }
          ],
          "constraints": [
            "1 <= nums.length <= 2 * 10^4",
            "-10^9 <= nums[i] <= 10^9"
          ],
          "follow_up": "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",
          "hints": [
            "Keep track of the maximum product subarray ending at each index.",
            "At each step, calculate the maximum product subarray ending at that index."
          ],
          "solution_approach": "Use Kadane's algorithm to find the maximum product subarray ending at each index. Keep track of the maximum product subarray seen so far.",
          "time_complexity": "O(n)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function maxProduct(nums) {\n  let maxProduct = nums[0];\n  let minProduct = nums[0];\n  let result = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const temp = maxProduct;\n    maxProduct = Math.max(nums[i], nums[i] * maxProduct, nums[i] * minProduct);\n    minProduct = Math.min(nums[i], nums[i] * temp, nums[i] * minProduct);\n    result = Math.max(result, maxProduct);\n  }\n  return result;\n}"
          },
          "related_topics": ["Array", "Dynamic Programming"],
          "testCases": [
            {
              "input": [[2,3,-2,4]],
              "output": 6
            },
            {
              "input": [[-2,0,-1]],
              "output": 0
            },
            {
              "input": [[-2,3,-4]],
              "output": 24
            },
            {
              "input": [[1,2,3,4]],
              "output": 24
            },
            {
              "input": [[-1,-2,-3]],
              "output": 6
            },
            {
              "input": [[0,2]],
              "output": 2
            },
            {
              "input": [[-2,3,-2,4]],
              "output": 48
            },
            {
              "input": [[2,-5,-2,-4,3]],
              "output": 24
            },
            {
              "input": [[-1,0,1]],
              "output": 1
            },
            {
              "input": [[1,-2,3,-4,-3,-4,-3]],
              "output": 432
            }
          ]
        },
        {
          "id": 7,
          "title": "Find All Duplicates in an Array",
          "topic": "Arrays",
          "difficulty": "Medium",
          "leetcode_link": "https://leetcode.com/problems/find-all-duplicates-in-an-array/",
          "description": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.",
          "template": "var findDuplicates = function(nums) {\n    // Your code here\n};",
          "example": [
            {
              "input": "nums = [4,3,2,7,8,2,3,1]",
              "output": "[2,3]"
            },
            {
              "input": "nums = [1,1,2]",
              "output": "[1]"
            },
            {
              "input": "nums = [1]",
              "output": "[]"
            }
          ],
          "constraints": [
            "2 <= n <= 10^5",
            "1 <= nums[i] <= n",
            "Each element in nums appears once or twice."
          ],
          "follow_up": "Could you do it without extra space and in O(n) runtime?",
          "hints": [
            "Use the array itself to mark which elements have been seen.",
            "Iterate through the array and mark the element at the index corresponding to the current element as negative."
          ],
          "solution_approach": "Use the array itself to mark which elements have been seen. Iterate through the array and mark the element at the index corresponding to the current element as negative.",
          "time_complexity": "O(n)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function findDuplicates(nums) {\n  const duplicates = [];\n  for (let num of nums) {\n    const index = Math.abs(num) - 1;\n    if (nums[index] < 0) {\n      duplicates.push(Math.abs(num));\n    } else {\n      nums[index] *= -1;\n    }\n  }\n  return duplicates;\n}"
          },
          "related_topics": ["Array"],
          "testCases": [
            {
              "input": [[4,3,2,7,8,2,3,1]],
              "output": [2,3]
            },
            {
              "input": [[1,1,2]],
              "output": [1]
            },
            {
              "input": [[1]],
              "output": []
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10]],
              "output": []
            },
            {
              "input": [[1,1,1,1,1]],
              "output": [1]
            },
            {
              "input": [[2,2,2,2,2]],
              "output": [2]
            },
            {
              "input": [[1,2,3,4,5,1,2,3,4,5]],
              "output": [1,2,3,4,5]
            },
            {
              "input": [[1,2,3,1,2,3]],
              "output": [1,2,3]
            },
            {
              "input": [[5,4,3,2,1,5,4,3,2,1]],
              "output": [5,4,3,2,1]
            },
            {
              "input": [[10,9,8,7,6,5,4,3,2,1,10,9]],
              "output": [10,9]
            }
          ]
        },
        {
          "id": 8,
          "title": "Rotate Array",
          "topic": "Arrays",
          "difficulty": "Easy",
          "leetcode_link": "https://leetcode.com/problems/rotate-array/",
          "description": "Given an array, rotate the array to the right by k steps, where k is non-negative.",
          "template": "var rotate = function(nums, k) {\n    // Your code here\n};",
          "example": {
            "input": "nums = [1,2,3,4,5,6,7], k = 3",
            "output": "[5,6,7,1,2,3,4]"
          },
          "constraints": [
            "1 <= nums.length <= 10^5",
            "-2^31 <= nums[i] <= 2^31 - 1",
            "0 <= k <= 10^5"
          ],
          "follow_up": "Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.",
          "hints": [
            "Use an extra array to store the rotated elements.",
            "Reverse the entire array, then reverse the first k elements, and finally reverse the remaining elements.",
            "Use cyclic replacements to rotate the array in place."
          ],
          "solution_approach": "Use cyclic replacements to rotate the array in place.",
          "time_complexity": "O(n)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function rotate(nums, k) {\n  k %= nums.length;\n  let count = 0;\n  for (let start = 0; count < nums.length; start++) {\n    let current = start;\n    let prev = nums[start];\n    do {\n      const next = (current + k) % nums.length;\n      const temp = nums[next];\n      nums[next] = prev;\n      prev = temp;\n      current = next;\n      count++;\n    } while (start !== current);\n  }\n}"
          },
          "related_topics": ["Array"],
          "testCases": [
            {
              "input": [[1,2,3,4,5,6,7], 3],
              "output": [5,6,7 ,1,2,3,4]
            },
            {
              "input": [[-1,-100,3,99], 2],
              "output": [3,99,-1,-100]
            },
            {
              "input": [[1,2,3,4,5,6,7], 1],
              "output": [7,1,2,3,4,5,6]
            },
            {
              "input": [[1,2,3,4,5,6,7], 2],
              "output": [6,7,1,2,3,4,5]
            },
            {
              "input": [[1,2,3,4,5,6,7], 4],
              "output": [4,5,6,7,1,2,3]
            },
            {
              "input": [[1,2,3,4,5,6,7], 5],
              "output": [3,4,5,6,7,1,2]
            },
            {
              "input": [[1,2,3,4,5,6,7], 6],
              "output": [2,3,4,5,6,7,1]
            },
            {
              "input": [[1,2,3,4,5,6,7], 7],
              "output": [1,2,3,4,5,6,7]
            },
            {
              "input": [[1,2,3,4,5,6,7], 8],
              "output": [7,1,2,3,4,5,6]
            },
            {
              "input": [[1,2,3,4,5,6,7], 9],
              "output": [6,7,1,2,3,4,5]
            }
          ]
        },
        {
          "id": 9,
          "title": "Single Number",
          "topic": "Arrays",
          "difficulty": "Easy",
          "leetcode_link": "https://leetcode.com/problems/single-number/",
          "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
          "template": "var singleNumber = function(nums) {\n    // Your code here\n};",
          "example": {
            "input": "nums = [2,2,1]",
            "output": "1"
          },
          "constraints": [
            "1 <= nums.length <= 3 * 10^4",
            "-3 * 10^4 <= nums[i] <= 3 * 10^4",
            "Each element in the array appears twice except for one element which appears only once."
          ],
          "follow_up": "Could you implement a solution with a linear runtime complexity and without using extra memory?",
          "hints": [
            "Use the XOR operation to cancel out pairs of numbers.",
            "The XOR operation has the property that x ^ x = 0 and x ^ 0 = x."
          ],
          "solution_approach": "Use the XOR operation to cancel out pairs of numbers. The XOR operation has the property that x ^ x = 0 and x ^ 0 = x.",
          "time_complexity": "O(n)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function singleNumber(nums) {\n  let result = 0;\n  for (let num of nums) {\n    result ^= num;\n  }\n  return result;\n}"
          },
          "related_topics": ["Bit Manipulation", "Array"],
          "testCases": [
            {
              "input": [[2,2,1]],
              "output": 1
            },
            {
              "input": [[4,1,2,1,2]],
              "output": 4
            },
            {
              "input": [[1]],
              "output": 1
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]],
              "output": 0
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]],
              "output": 21
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,21]],
              "output": 0
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,21,22]],
              "output": 22
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,21,22,22]],
              "output": 0
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,21,22,22, 23]],
              "output": 23
            },
            {
              "input": [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3 ,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,21,22,22, 23, 23]],
              "output": 0
            }
          ]
        },
        {
          "id": 10,
          "title": "3Sum",
          "topic": "Arrays",
          "difficulty": "Medium",
          "leetcode_link": "https://leetcode.com/problems/3sum/",
          "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
          "template": "var threeSum = function(nums) {\n    // Your code here\n};",
          "example": {
            "input": "nums = [-1,0,1,2,-1,-4]",
            "output": "[[-1,-1,2],[-1,0,1]]"
          },
          "constraints": [
            "0 <= nums.length <= 3000",
            "-10^5 <= nums[i] <= 10^5"
          ],
          "follow_up": "Can you solve the problem in O(n^2) runtime complexity?",
          "hints": [
            "Sort the array to make it easier to find the triplets.",
            "Use two pointers to find the other two elements in the triplet."
          ],
          "solution_approach": "Sort the array to make it easier to find the triplets. Use two pointers to find the other two elements in the triplet.",
          "time_complexity": "O(n^2)",
          "space_complexity": "O(1)",
          "code_snippet": {
            "javascript": "function threeSum(nums) {\n  nums.sort((a, b) => a - b);\n  const triplets = [];\n  for (let i = 0; i < nums.length - 2; i++) {\n    if (i > 0 && nums[i] === nums[i - 1]) {\n      continue;\n    }\n    let left = i + 1;\n    let right = nums.length - 1;\n    while (left < right) {\n      const sum = nums[i] + nums[left] + nums[right];\n      if (sum === 0) {\n        triplets.push([nums[i], nums[left], nums[right]]);\n        while (left < right && nums [left] === nums[left + 1]) {\n          left++;\n        }\n        while (left < right && nums[right] === nums[right - 1]) {\n          right--;\n        }\n        left++;\n        right--;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return triplets;\n}"
          },
          "related_topics": ["Array", "Two Pointers"],
          "testCases": [
            {
              "input": [[-1,0,1,2,-1,-4]],
              "output": [[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            },
            {
              "input": [[-1,0,1,2,-1,-4 ,-2, -3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]],
              "output": [[-4,0,4],[-4,1,3],[-3,-2,5],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
            }
          ]
        }
      ]
    }
  ]
}